1. When would you want to use a remote repository rather than keeping all your work local?

For a number of reasons: when collaborating with others, when you want to use multiple machines,
to open up the repo for contributors (open source), and to keep a separate copy of your repo.


2. Why might you want to always pull changes manually rather than have Git
automatically stay up-to-date with your remote repository?

You want to be in control of the state of your repo on your local machine. If
you were collaborating on a team, using Github, and your local repo automatically
pulled repo updates from Github, you might end up with multiple conflicts and
changes you weren't expecting.


3. Describe the differences between forks, clones, and branches. When would you
use one instead of another?

A branch is a label for a history of commits that are separated from master,
useful for new logically separate features, bug fixes or experiments.
A clone is a copy of a repo, including all the history. Useful for copying a repo
from one machine to another (including Github to machine).
A fork is Github's version of a clone. It's a copy of a Github repo, which is
copied into your own Github repo. Useful when you want to leverage someone's
repo work (and ensure they retain credit) and update it with your own work
(without impacting the original repo).


4. What is the benefit of having a copy of the last known state of the remote
stored locally?

You can git diff, git log, etc on your local machine, without being connected
to the interwebs.


5. How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

With great difficulty! You'd have to use some other shared file repo, like google
drive or dropbox. You'd be able to get files into the shared space more easily
(maybe), but collaborating on the files, knowing what was changed, by whom, and
when would be much more difficult. I wouldn't even want to think about how
difficult it would be to incorporate changes...


6. When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

You'd want to make changes in a branch when you're collaborating with colleagues.
Using a branch helps separate the logical changes. Keeping these off master until
the team agrees on the merge (through a PR), helps everyone to keep the same
understanding of the state of the master branch. Things shouldn't change out from
underneath you, unexpectedly. This adds ceremony for the sake of clarity.

The benefit of committing straight to master is the removal of the extra ceremony
that comes with branching a PRs. This is fine if you're working on your own, so
you always know the expected state of master. This would get messy quickly, if
you were working on a team of collaborators.
