1. What happens when you initialise a repository? Why do you need to do it?

It identifies the directory as a git repo.
A .git file is generated to store the metadata about the files in the repo.


2. How is the staging area different from the working directory and the
repository? What value do you think it offers?

The working directory contains any saved file within it, not tracking any
versions or change history.
The repository contains all files that are being tracked, every version since
you started tracking them, and all metadata on those files.
The staging area is a halfway house for files. They have been created and may
have had some changes made to them, but those changes have not yet been
committed to the version/change history in the repository.

The staging area has value for:
- Breaking up commits, especially on the initial commit.
- Providing a two-step process gives a break point if you change your mind or
have made a mistake.
- It also provides the opportunity to batch up changes into a single commit.


3. How can you use the staging area to make sure you have one commit per logical
change?

The staging area gives the opportunity to check what changes have been made
before they are committed. You can the  make sure you only commit the logically
grouped changes to the repo.

4. What are some situations when branches would be helpful in keeping your
history organised? How would branches help?

When you want to try out slightly different versions of features.
When you want to try some kind of short-lived experimental feature.


5. How do the diagrams help you visualise the branch structure?

They really help to understand the non-linear nature of git, where branches
were made from master, how the branches relate to each other, and where new
branches may result in a detached head state.


6. What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

Merging two branches together results in both commit histories being available
on the same branch.
We show it the way we do in the diagram to make it clear both histories are
available, and to highlight where commits might still not be on the master
branch.


7. What are the pros and cons of Git's automatic merging vs always doing merges
manually

Automatic merging is great, when it's absolutely clear what needs to be merged,
and there are no conflicts.
Manual merging would be a pain for the 0 problem case.
Automatic merging would require some crazy deep engineering to resolve conflicts,
and probably still wouldn't be able to see the intent within a human's head.
Manual merging is great when there are conflicts. It helps using humans to solve
the fuzzy logic by revealing their own intent, or resolving through conversation.
