1. How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Diff used the power of the computer to scan the files, instead of having to
eyeball each line.
It clearly shows which lines have been removed and which have been added.
This meant I could ignore everything which remained the same, and focus on the
lines that changed.
I found the error much quicker than I would have, and in a much less frustrating
manner.


2. How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

You wouldn't need to keep multiple versions, with different version names.
You could easily find historic versions.
You could potentially roll back to a previous working version, if you break
something in the new version.
You could hunt down where errors were introduced and revert to the last known
working state.


3. What do you think are the pros and cons of manually choosing when to create
a commit, like you do in Git, vs having versions automatically saved, like
Google Docs does?

Pros:
Logical save points - commits made at the logical point (e.g. feature completion).
Right sizing commits - chosen by the dev based on the size of the work.
Tagging with messages - right-sized commits can be given meaningful messages.

Cons:
Remembering - the onus is on the dev to remember to create a commit.
Choosing the right size - getting it right is subjective.
Useful messages - this is still up to the dev, so they may not be useful anyway.


4. Why do you think some version control systems, like Git, allow saving
multiple files in one commit, while others, like Google Docs, treat each file
separately?

Because they're for two different purposes. For code (git), I'll often change
multiple files at once for one feature. E.g. adding a button requires changes to
html, css and maybe js files. For documents (Google Docs), a change is usually
limited to a single file. If I need to update an RFI it will just be in the
Google Doc, not in any other doc as well.


5. How can you use the commands git log and git diff to view the history of files?

git log shows you the commit history for the repo, across all files. Scrolling
through this history allows you to identify the relevant commits from their
commit messages. Git diff can be used to compare the 1st and 2nd commits you
want to look at (old then new), to see what changes happened from one commit to
the next.


6. How might using version control make you more confident to make changes that
could break something?

I'm always able to travel back and forth, to any point in the commit history,
using git checkout. It's like a time travel device that can always get me to
the last known good state, and the first point at which a bug is introduced.
This gives me confidence to try things out as, if I break anything, I can simply
revert to the last point in time when everything still worked.


7. Now that you have your workspace set up, what do you want to try using git for?

I want to use it for tracking all the changes I make in a code repo.
I think it could be useful for tracking text/markdown docs too, like a repo for
a book or a blog.
